require 'date'
require 'net/http'
require 'json'

class SkyDB
  class SkyError < StandardError; end

  ######################################
  # Debugging
  ######################################

  class << self
    attr_accessor :debug
  end


  ######################################
  # Utility
  ######################################
  
  # Formats a timestamp as ISO8601 formatted string with fractional seconds.
  def self.format_timestamp(timestamp)
    if timestamp.nil?
      return nil
    else
      return timestamp.to_time.utc.to_datetime.strftime('%Y-%m-%dT%H:%M:%S.%6NZ')
    end
  end

  # Denormalizes nested results generated by Sky into rows.
  def self.denormalize(obj, fields)
    return nil if obj.nil?
    return [obj] if fields.empty?

    fields = fields.dup()
    field = fields.shift()
    rows = obj[field].keys.map do |k|
      denormalize(obj[field][k], fields).each do |item|
        item[field] = k
      end
    end

    return rows.flatten
  end

  # Normalizes rows into lookup hashes.
  def self.normalize(input, aggregates, fields)
    raise "Fields cannot be null" if fields.empty?
    return rows if aggregates.empty?
    
    output = []
    lookup = {}
    
    input.each do |input_row|
      # Generate a unique key based on non-aggregate, non-field rows.
      target = lookup
      ids = input_row.keys.select {|k| aggregates.index(k).nil? && fields.index(k).nil?}.sort
      ids.each do |id|
        target[id] ||= {}
        target = target[input_row[id]] ||= {}
      end

      # If row doesn't exist then add it.
      row = target[:row]
      if target[:row].nil?
        row = target[:row] = ids.inject({}) {|h,id| h[id] = input_row[id]; h}
        output << row
      end

      # Create inner value object.
      value = {}
      fields.each do |field|
        value[field] = input_row[field]
      end

      # Drill into row and append value.
      target = row
      aggregates.each_with_index do |aggregate, index|
        target = target[aggregate] ||= {}
        if index < aggregates.length-1
          target = target[input_row[aggregate]] ||= {}
        else
          target[input_row[aggregate]] ||= value
        end
      end
    end
    
    return output
  end
end

require 'skydb/client'
require 'skydb/connection'
require 'skydb/table'
require 'skydb/property'
require 'skydb/event'
require 'skydb/version'
